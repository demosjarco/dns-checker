name: Update `workerd` runtime

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - '**/package*.json'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  update-files:
    if: github.event_name == 'workflow_dispatch' || (startsWith(github.event.pull_request.head.ref, 'dependabot/npm_and_yarn/') && contains(github.event.pull_request.head.ref, '/cloudflare-') && github.actor == 'dependabot[bot]')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          disable-sudo-and-containers: true
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: lts/*
          check-latest: true
          cache: 'npm'
      - run: npm ci --ignore-scripts --include-workspace-root --workspaces
      - run: npm run-script install --if-present --include-workspace-root --workspaces
      # No need to run `npm ci` in submodule
      - name: Get minor version of workerd
        id: get-version
        run: |
          VERSION=$(npm ls workerd --json | jq -r '.. | .workerd?.version? | select(.)')
          MINOR_VERSION=${VERSION#*.}
          MINOR_VERSION_HYPHEN="${MINOR_VERSION:0:4}-${MINOR_VERSION:4:2}-${MINOR_VERSION:6:2}"
          echo "minor-version-hyphen=$MINOR_VERSION_HYPHEN" >> $GITHUB_OUTPUT
      - name: Update `compatibility_date`
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const maxDepth = 3;

            await Promise.all([import('node:fs/promises'), import('node:path')]).then(async ([{ readdir, stat, readFile, writeFile }, { join }]) => {
              // Function to find target files up to a certain depth
              async function findFiles(dir, depth = 0) {
                if (depth > maxDepth) return [];
                let foundFiles = [];

                return readdir(dir)
                  .then(async (files) => {
                    for (const file of files) {
                      const fullPath = join(dir, file);
                      await stat(fullPath).then(async (fileStat) => {
                        if (fileStat.isDirectory()) {
                          foundFiles = foundFiles.concat(await findFiles(fullPath, depth + 1));
                          /**
                          * As of Wrangler v3.91.0 Wrangler supports both JSON (wrangler.json or wrangler.jsonc)
                          * @link https://developers.cloudflare.com/workers/wrangler/configuration/
                          */
                        } else if (['wrangler.jsonc', 'wrangler.json'].includes(file)) {
                          foundFiles.push(fullPath);
                        }
                      });
                    }

                    return foundFiles;
                  })
                  .catch((err) => {
                    console.error(`Error reading directory ${dir}`, err);
                    return foundFiles;
                  });
              }

              await findFiles('.').then(async (jsonFiles) => {
                if (jsonFiles.length > 0) {
                  // Update compatibility_date in each found file
                  await Promise.all(
                    jsonFiles.map((filePath) => {
                      return readFile(filePath, 'utf8')
                        .then((content) => {
                          const updatedContent = content.replaceAll(/(?!["']compatibility_date["']:\s*["'])\d{4}-\d{2}-\d{2}(?=["'])/gi, process.env['NEW_COMPATIBILITY_DATE']);

                          if (updatedContent !== content) {
                            return writeFile(filePath, updatedContent, 'utf8').then(() => console.log('Updated compatibility date in', filePath));
                          } else {
                            console.log(`No changes needed in: ${filePath}`);
                          }
                        })
                        .catch((err) => {
                          throw new Error(`Error reading file ${filePath}: ${err}`);
                        });
                    }),
                  );

                  console.log('Finished updating compatibility date in', jsonFiles);
                } else {
                  throw new Error('No wrangler json files found');
                }
              });
            });
        env:
          NEW_COMPATIBILITY_DATE: ${{ steps.get-version.outputs.minor-version-hyphen }}
      - name: Git Setup
        run: |
          git config user.name "dependabot[bot]"
          git config user.email "dependabot[bot]@users.noreply.github.com"
      - run: find . -maxdepth 3 -name "wrangler.json*" -print0 | xargs -0 git add
      - run: git commit -m "Update \`compatibility_date\` in \`wrangler.toml\`" || echo "\`compatibility_date\` change not needed"
      - run: git push
